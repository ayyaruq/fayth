// +build ignore
//
// This program creates the opcode package with go generate.

package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"text/template"
	"time"
)

var url = "https://github.com/SapphireServer/FFXIVOpcodes/raw/master/opcodes.json"

type opcodeEntry struct {
	Code uint32 `json:"code"`
	Name string `json:"name"`
}

type opcodeList struct {
	Channel string        `json:"channel"`
	Opcodes []opcodeEntry `json:"opcodes"`
}

func fetch(url string) ([]opcodeList, error) {
	res, err := http.Get(url)
	if err != nil {
		return nil, err
	}

	defer res.Body.Close()

	var opcodes []opcodeList

	err = json.NewDecoder(res.Body).Decode(&opcodes)
	if err != nil {
		return nil, err
	}

	return opcodes, nil
}

func main() {
	// Build opcode list
	list, err := fetch(url)
	if err != nil {
		log.Fatal(err)
	}

	for _, entry := range list {
		f, err := os.Create(fmt.Sprintf("%s.go", entry.Channel))
		if err != nil {
			log.Fatal(err)
		}
		defer f.Close()

		packageTemplate.Execute(f, struct {
			Timestamp string
			URL       string
			Opcodes   []opcodeEntry
		}{
			Timestamp: time.Now().Format(time.RFC822),
			URL:       url,
			Opcodes:   entry.Opcodes,
		})
	}

	log.Print("Complete")

	return
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated at {{ .Timestamp }},
// using data from {{ .URL }}
package opcodes

var byCode = []map[uint32]string{
{{- range .Opcodes }}
	{{ print .Code }}: {{ printf "%q" .Name }},
{{- end }}
}

var byName = []map[string]uint32{
{{- range .Opcodes }}
	{{ printf "%q" .Name }}: {{ print .Code }},
{{- end }}
}
`))
